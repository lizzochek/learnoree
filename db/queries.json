{
  "create": {
    "db": "CREATE DATABASE learnoree;",
    "tables": [
      "CREATE TABLE `Faculties` (`Id` INT(10)  NOT NULL AUTO_INCREMENT,  `Name` VARCHAR(50) NOT NULL,  `ShortName` VARCHAR(10) NOT NULL,  `Contacts` VARCHAR(10) NOT NULL,  PRIMARY KEY (`Id`));",
      "CREATE TABLE `Cathedras` (`Id` INT(10) NOT NULL AUTO_INCREMENT,  `Name` VARCHAR(50) NOT NULL,  `ShortName` VARCHAR(10) NOT NULL,  `Contacts` VARCHAR(10) NOT NULL,  `FacultyId` INT(10) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`FacultyId`) REFERENCES `Faculties`(`Id`));",
      "CREATE TABLE `Users` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Email` VARCHAR(255) NOT NULL,  `Role` VARCHAR(150) NOT NULL,  `Password` VARCHAR(150) NOT NULL,  `Authorized` TINYINT NOT NULL,  PRIMARY KEY (`Id`));",
      "CREATE TABLE `Students` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(20) NOT NULL,  `Surname` VARCHAR(20) NOT NULL,  `SecondName` VARCHAR(20) NOT NULL,  `UserId` INT(10) NOT NULL,  `Phone` VARCHAR(10),  `StartDate` DATE NOT NULL,  `EndDate` DATE NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`UserId`) REFERENCES `Users`(`Id`));",
      "CREATE TABLE `Admins` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(20) NOT NULL,  `Surname` VARCHAR(20) NOT NULL,  `SecondName` VARCHAR(20) NOT NULL,  `UserId` INT(10) NOT NULL,  `Phone` VARCHAR(10),  PRIMARY KEY (`Id`), FOREIGN KEY (`UserId`) REFERENCES `Users`(`Id`));",
      "CREATE TABLE `Teachers` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(20) NOT NULL,  `Surname` VARCHAR(20) NOT NULL,  `SecondName` VARCHAR(20) NOT NULL,  `CathedraId` INT(10),  `UserId` INT(10) NOT NULL,  `Phone` VARCHAR(10),  PRIMARY KEY (`Id`), FOREIGN KEY (`UserId`) REFERENCES `Users`(`Id`));",
      "CREATE TABLE `Groups` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(10) NOT NULL,  `CathedraId` INT(10) NOT NULL,  `GroupLeaderId` INT(10),  `CuratorId` INT(10),  PRIMARY KEY (`Id`), FOREIGN KEY (`CathedraId`) REFERENCES `Cathedras`(`Id`), FOREIGN KEY (`CuratorId`) REFERENCES `Teachers`(`Id`));",
      "CREATE TABLE `StudentGroupLink` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `StudentId` INT(10) NOT NULL,  `GroupId` INT(10) NOT NULL,  PRIMARY KEY (`Id`));",
      "CREATE TABLE `Subjects` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(20) NOT NULL,  `CathedraId` INT(10),  `TeacherId` INT(10) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`TeacherId`) REFERENCES `Teachers`(`Id`), FOREIGN KEY (`CathedraId`) REFERENCES `Cathedras`(`Id`));",
      "CREATE TABLE `CurrentMarks` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `StudentId` INT(10) NOT NULL,  `Mark` INT(3) NOT NULL,  `TaskType` VARCHAR(50) NOT NULL,  `SubjectId` INT(10) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`StudentId`) REFERENCES `Students`(`Id`), FOREIGN KEY (`SubjectId`) REFERENCES `Subjects`(`Id`));",
      "CREATE TABLE `PersonalSubjects` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `GroupId` INT(10),  `SubjectId` INT(10) NOT NULL,  `Semester` DATE NOT NULL,  `SubjectGroup` INT(10) NOT NULL UNIQUE,  PRIMARY KEY (`Id`), FOREIGN KEY (`GroupId`) REFERENCES `Groups`(`Id`));",
      "CREATE TABLE `PersonalSubjectGroups` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `StudentId` INT(10) NOT NULL,  `GroupId` INT(10) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`StudentId`) REFERENCES `Students`(`Id`), FOREIGN KEY (`GroupId`) REFERENCES `PersonalSubjects`(`SubjectGroup`));",
      "CREATE TABLE `Schedule` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `SubjectId` INT(10) NOT NULL,  `GroupId` INT(10),  `PersonalSubjGroupId` INT(10) NOT NULL,  `Time` DATE NOT NULL,  `Place` VARCHAR(50),  `Semester` DATE NOT NULL,  `WeekDay` VARCHAR(15) NOT NULL,  `Week` INT(1) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`PersonalSubjGroupId`) REFERENCES `PersonalSubjectGroups`(`Id`), FOREIGN KEY (`GroupId`) REFERENCES `Groups`(`Id`));"
    ]
  },
  "use": "USE learnoree;",
  "selectUsersByEmail": "SELECT * FROM Users WHERE Email = {{email}};",
  "selectUser": "SELECT * FROM `{{table}}` WHERE UserId = {{id}};",
  "getUserByToken": "SELECT * FROM Users WHERE ResetToken = {{token}};",
  "modifyUserToken": "UPDATE Users SET ResetToken = {{token}} WHERE Email = {{email}};",
  "modifyUserPassword": "UPDATE Users SET Password={{password}} WHERE ResetToken = {{token}};",
  "addUserCredentials": "INSERT INTO Users (Email, Role, Password, Authorized) VALUES ('{{email}}', '{{role}}', '{{password}}', 0);",
  "insertAdmin": "INSERT INTO Admins (Name, Surname, SecondName, UserId, Phone) VALUES ('{{name}}', '{{surname}}', '{{secondName}}', {{id}}, '{{phone}}')",
  "insertTeacher": "INSERT INTO Teachers (Name, Surname, SecondName, CathedraId, UserId, Phone) VALUES ('{{name}}', '{{surname}}', '{{secondName}}', {{cathedraId}}, {{id}}, '{{phone}}')",
  "insertStudent": "INSERT INTO Students (Name, Surname, SecondName, UserId, Phone, StartDate, EndDate) VALUES ('{{name}}', '{{surname}}', '{{secondName}}', {{id}}, '{{phone}}', STR_TO_DATE('{{startDate}}', '%d/%m/%Y'), STR_TO_DATE('{{endDate}}', '%d/%m/%Y'))",
  "getCathedra": "SELECT * FROM Cathedras LEFT JOIN Faculties ON Faculties.Id = Cathedras.FacultyId WHERE Faculties.ShortName = '{{faculty}}' and Cathedras.ShortName = '{{cathedra}}",
  "getCatherdaByName": "SELECT * FROM `Cathedras` WHERE `Cathedras`.Name = '{{name}}'",
  "getGroup": "SELECT * FROM `Groups` WHERE `Groups`.Name = '{{group}}';",
  "getPersonalSubjectGroup": "SELECT ps.`SubjectGroup` as `Id` FROM `Subject` s LEFT JOIN `PersonalSubjects` ps ON s.Id = ps.SubjectId WHERE s.Name='{{subject}}'",
  "getSubject": "SELECT * FROM `Subjects` WHERE `Subjects`.Name = '{{subject}}';",
  "getTeacher": "SELECT * FROM `Teachers` WHERE `Teachers`.Name = '{{name}}' AND `Teachers`.Surname = '{{surname}}' AND `Teachers`.SecondName = '{{secondName}}';",
  "getAllGroups": "SELECT Name FROM `Groups`;",
  "getAllTeachers": "SELECT t.`Name`, t.`Surname`, t.`SecondName`, t.`Phone`, c.`Name` as `Cathedra`, f.`Name` as `Faculty` FROM `Teachers` t LEFT JOIN `Cathedras` c ON c.`Id` = t.CathedraId LEFT JOIN `Faculties` f ON f.`Id` = c.`FacultyId`;",
  "insertStudentGroupLink": "INSERT INTO StudentGroupLink (StudentId, GroupId) VALUES ('{{student}}', '{{group}}');",
  "getSpecialty": "SELECT `Specialties`.Id, `Specialties`.Name, `Specialties`.Code, `Specialties`.CathedraId FROM `Specialties` JOIN `Groups` ON `Specialties`.Id = `Groups`.SpecialtyId JOIN `StudentGroupLink` ON `StudentGroupLink`.GroupId = `Groups`.Id WHERE `StudentGroupLink`.StudentId = '{{id}}'",
  "getFacultyBySpecialty": "SELECT `Faculties`.Id, `Faculties`.Name, `Faculties`.ShortName, `Faculties`.Contacts FROM `Faculties` JOIN `Cathedras` ON `Cathedras`.FacultyId = `Faculties`.Id JOIN `Specialties` ON `Specialties`.CathedraId = `Cathedras`.Id WHERE `Specialties`.Id = '{{id}}';",
  "getStudentGroup": "SELECT * FROM `Groups` JOIN `StudentGroupLink` ON `StudentGroupLink`.GroupId = `Groups`.Id WHERE `StudentGroupLink`.StudentId = '{{id}}'",
  "getTeacherCathedraAndFaculty": "SELECT `Faculties`.Id as faculty_id, `Faculties`.Name  as faculty_name, `Faculties`.ShortName  as faculty_shortName, `Faculties`.Contacts  as faculty_contacts, `Cathedras`.Id as cathedra_id, `Cathedras`.Name as cathedra_name, `Cathedras`.ShortName as cathedra_shortName, `Cathedras`.Contacts as cathedra_contacts FROM `Teachers` JOIN `Cathedras` ON `Teachers`.CathedraId = `Cathedras`.Id JOIN `Faculties` ON `Cathedras`.FacultyId = `Faculties`.Id WHERE `Teachers`.Id = '{{id}}'",
  "getGroupSchedule": "SELECT sc.`Id`, sc.`Time`, sc.`Place`, sc.`WeekDay`, sc.`Week`, sc.`Semester`, su.`Name` as `SubjectName`, t.`Name` as `TeacherName`, t.`Surname` as `TeacherSurname`, t.`SecondName` as `TeacherSecondName` FROM `Schedule` sc LEFT JOIN `Subjects` su ON sc.`SubjectId` = su.`Id` LEFT JOIN `Teachers` t ON t.`Id` = su.`TeacherId` LEFT JOIN `Groups` g ON g.`Id` = sc.`GroupId` WHERE g.`Id` = {{id}};",
  "getStudentSchedule": "SELECT sc.`Id`, sc.`Time`, sc.`Place`, sc.`WeekDay`, sc.`Week`, sc.`Semester`, su.`Name` as `SubjectName`, t.`Name` as `TeacherName`, t.`Surname` as `TeacherSurname`, t.`SecondName` as `TeacherSecondName` FROM `Schedule` sc LEFT JOIN `PersonalSubjectGroups` psg ON sc.`PersonalSubjGroupId` = psg.`Id` LEFT JOIN `PersonalSubjects` ps ON ps.`SubjectGroup` = psg.`Id` LEFT JOIN `Subjects` su ON su.`Id` = ps.`SubjectId` LEFT JOIN `Teachers` t ON t.`Id` = su.`TeacherId` LEFT JOIN `Students` st ON psg.`StudentId` = st.`Id` WHERE st.`Id` = {{id}};",
  "getGroupIdByStudent": "SELECT g.`Id` FROM `Groups` g LEFT JOIN `StudentGroupLink` link ON g.`Id` =  link.`GroupId` LEFT JOIN `Students` s ON s.`Id` = link.`StudentId` WHERE s.`Id` = {{id}};",
  "getTeacherSchedule": "SELECT sc.`Id`, sc.`Time`, sc.`Place`, sc.`WeekDay`, sc.`Week`, sc.`Semester`, su.`Name` as `SubjectName`, t.`Name` as `TeacherName`, t.`Surname` as `TeacherSurname`, t.`SecondName` as `TeacherSecondName` FROM `Schedule` sc  LEFT JOIN `Subjects` su ON su.`Id` = sc.`SubjectId` LEFT JOIN `Teachers` t ON t.`Id` = su.`TeacherId` WHERE t.`Id` = {{id}};",
  "setSchedule": "INSERT INTO `Schedule` (`SubjectId`, `GroupId`, `PersonalSubjGroupId`, `Time`, `Place`, `Semester`, `weekDay`, `Week`) VALUES ({{subjectId}}, {{groupId}}, {{personalSubjId}}, '{{time}}',  '{{place}}', STR_TO_DATE('{{semester}}', '%Y-%m-%d'), '{{weekDay}}', {{week}})",
  "setSubject": "INSERT INTO `Subjects` (`Name`, `CathedraId`, `TeacherId`) VALUES ('{{subjectName}}', {{cathedraId}}, {{teacherId}})",
  "deleteLesson": "DELETE FROM `Subjects` WHERE `Id` = {{id}}",
  "getStudentMarks": "SELECT cm.`Id`, cm.`Mark`, cm.`TaskType`, s.`Name` as `SubjectName` FROM `CurrentMarks` cm LEFT JOIN `Subjects` s ON cm.`SubjectId` = s.`Id` WHERE cm.`StudentId` = {{id}}",
  "getTeacherSubjects": "SELECT s.`Id` as `SubjectId`, s.`Name` as `SubjectName` FROM `Teachers` t LEFT JOIN `Subjects` s ON t.`Id` = s.`TeacherId` WHERE `TeacherId` = {{id}}",
  "getPersonalSubjectGroups": "SELECT s.`Id` as `SubjectId`, ps.`SubjectGroup` as `GroupId` FROM `Subjects` s LEFT JOIN `PersonalSubjects` ps ON s.`Id` = ps.`SubjectId` WHERE ps.`SubjectId` = {{id}} AND ps.`SubjectGroup` IS NOT NULL;",
  "getPersonalSubjStudents": "SELECT st.`Id` as `StudentId`, st.`Name`, st.`Surname`, st.`SecondName`, psg.`GroupId` FROM `Students` st JOIN `PersonalSubjectGroups` psg ON psg.`StudentId` = st.`Id` WHERE psg.`GroupId` = {{id}}",
  "getGeneralSubjectGroups": "SELECT g.`Id` as `GroupId`, g.`Name` as `GroupName`, s.`Id` as `SubjectId` FROM `Subjects` s LEFT JOIN `Schedule` sc ON s.`Id` = sc.`SubjectId` LEFT JOIN `Groups` g ON g.`Id` = sc.`GroupId` WHERE sc.`GroupId` IS NOT NULL AND s.`Id` = {{id}}",
  "getGeneralSubjStudents": "SELECT st.`Id` as `StudentId`, st.`Name`, st.`Surname`, st.`SecondName`, g.`Id` as `GroupId` FROM `Groups` g LEFT JOIN `StudentGroupLink` sgl ON sgl.`GroupId` = g.`Id` LEFT JOIN `Students` st ON st.`Id` = sgl.`StudentId` WHERE g.`Id` = {{id}}",
  "getStudentMarksbyId": "SELECT m.`Id` as `MarkId`, m.`Mark`, m.`TaskType` FROM `CurrentMarks` m LEFT JOIN `Students` s ON s.`Id` = m.`StudentId` WHERE s.`Id` = {{studentId}} AND m.`SubjectId` = {{subjectId}}",
  "setMark": "INSERT INTO `CurrentMarks` (`StudentId`, `Mark`, `TaskType`, `SubjectId`) VALUES ({{studentId}}, {{mark}}, '{{taskType}}', {{subjectId}})",
  "getChoiseSubjects": "SELECT ps.`Id` as `SubjectId`, s.`Name` as `SubjectName`, t.`Name` as `TeacherName`, t.`Surname` as `TeacherSurname`, t.`SecondName` as `TeacherSecondName`, c.`Name` as `Cathedra` FROM `Subjects` s LEFT JOIN `PersonalSubjects` ps ON ps.`SubjectId` = s.`Id` LEFT JOIN `Groups` g ON g.`Id` = ps.`GroupId` LEFT JOIN `Teachers` t ON t.`Id` = s.`TeacherId` LEFT JOIN `Cathedras` c ON c.`Id` = s.`CathedraId` WHERE g.`Id` = {{id}}",
  "getAllChoiseSubjects": "SELECT ps.`Id` as `SubjectId`, s.`Name` as `SubjectName`, t.`Name` as `TeacherName`, t.`Surname` as `TeacherSurname`, t.`SecondName` as `TeacherSecondName`, c.`Name` as `Cathedra`, g.`Name` as `GroupName` FROM `Subjects` s RIGHT JOIN `PersonalSubjects` ps ON ps.`SubjectId` = s.`Id` LEFT JOIN `Groups` g ON g.`Id` = ps.`GroupId` LEFT JOIN `Teachers` t ON t.`Id` = s.`TeacherId` LEFT JOIN `Cathedras` c ON c.`Id` = s.`CathedraId`",
  "getChosenSubjects": "SELECT ps.`Id` FROM `PersonalSubjectGroups` psg LEFT JOIN `Students` st ON st.`Id` = psg.`StudentId` LEFT JOIN `PersonalSubjects` ps ON ps.`SubjectGroup` = psg.`GroupId` WHERE st.`Id` = {{id}};",
  "getSubjectGroup": "SELECT `SubjectGroup` FROM `PersonalSubjects` WHERE `Id` = {{id}}",
  "setChosenSubject": "INSERT INTO `PersonalSubjectGroups` (`StudentId`, `GroupId`) VALUES ({{studentId}}, {{groupId}})",
  "getChosenSubjectGroup": "SELECT ps.`GroupId` FROM `PersonalSubjectGroups` psg LEFT JOIN `Students` st ON st.`Id` = psg.`StudentId` LEFT JOIN `PersonalSubjects` ps ON ps.`SubjectGroup` = psg.`GroupId` WHERE st.`Id` = {{studentId}} AND ps.`Id` = {{subjectId}};",
  "deleteChosenSubject": "DELETE FROM `PersonalSubjectGroups` WHERE `StudentId` = {{studentId}} AND `GroupId` = {{groupId}}",
  "deleteSubject": "DELETE FROM `PersonalSubjects` WHERE `Id` = {{id}}",
  "getLastGroupId": "SELECT MAX(`SubjectGroup`) as `max` FROM `PersonalSubjects`;",
  "setChoiseSubject": "INSERT INTO `PersonalSubjects` (`GroupId`, `SubjectId`, `Semester`, `SubjectGroup`) VALUES ({{group}}, {{subject}}, STR_TO_DATE('{{semester}}', '%Y-%m-%d'), {{subjGroup}});"
}
