{
  "create": {
    "db": "CREATE DATABASE learnoree;",
    "tables": [
      "CREATE TABLE `Faculties` (`Id` INT(10)  NOT NULL AUTO_INCREMENT,  `Name` VARCHAR(50) NOT NULL,  `ShortName` VARCHAR(10) NOT NULL,  `Contacts` VARCHAR(10) NOT NULL,  PRIMARY KEY (`Id`));",
      "CREATE TABLE `Cathedras` (`Id` INT(10) NOT NULL AUTO_INCREMENT,  `Name` VARCHAR(50) NOT NULL,  `ShortName` VARCHAR(10) NOT NULL,  `Contacts` VARCHAR(10) NOT NULL,  `FacultyId` INT(10) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`FacultyId`) REFERENCES `Faculties`(`Id`));",
      "CREATE TABLE `Users` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Email` VARCHAR(255) NOT NULL,  `Role` VARCHAR(150) NOT NULL,  `Password` VARCHAR(150) NOT NULL,  `Authorized` TINYINT NOT NULL,  PRIMARY KEY (`Id`));",
      "CREATE TABLE `Students` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(20) NOT NULL,  `Surname` VARCHAR(20) NOT NULL,  `SecondName` VARCHAR(20) NOT NULL,  `UserId` INT(10) NOT NULL,  `Phone` VARCHAR(10),  `StartDate` DATE NOT NULL,  `EndDate` DATE NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`UserId`) REFERENCES `Users`(`Id`));",
      "CREATE TABLE `Admins` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(20) NOT NULL,  `Surname` VARCHAR(20) NOT NULL,  `SecondName` VARCHAR(20) NOT NULL,  `UserId` INT(10) NOT NULL,  `Phone` VARCHAR(10),  PRIMARY KEY (`Id`), FOREIGN KEY (`UserId`) REFERENCES `Users`(`Id`));",
      "CREATE TABLE `Teachers` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(20) NOT NULL,  `Surname` VARCHAR(20) NOT NULL,  `SecondName` VARCHAR(20) NOT NULL,  `CathedraId` INT(10),  `UserId` INT(10) NOT NULL,  `Phone` VARCHAR(10),  PRIMARY KEY (`Id`), FOREIGN KEY (`UserId`) REFERENCES `Users`(`Id`));",
      "CREATE TABLE `Groups` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(10) NOT NULL,  `CathedraId` INT(10) NOT NULL,  `GroupLeaderId` INT(10),  `CuratorId` INT(10),  PRIMARY KEY (`Id`), FOREIGN KEY (`CathedraId`) REFERENCES `Cathedras`(`Id`), FOREIGN KEY (`CuratorId`) REFERENCES `Teachers`(`Id`));",
      "CREATE TABLE `StudentGroupLink` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `StudentId` INT(10) NOT NULL,  `GroupId` INT(10) NOT NULL,  PRIMARY KEY (`Id`));",
      "CREATE TABLE `Subjects` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `Name` VARCHAR(20) NOT NULL,  `CathedraId` INT(10),  `TeacherId` INT(10) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`TeacherId`) REFERENCES `Teachers`(`Id`), FOREIGN KEY (`CathedraId`) REFERENCES `Cathedras`(`Id`));",
      "CREATE TABLE `CurrentMarks` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `StudentId` INT(10) NOT NULL,  `Mark` INT(3) NOT NULL,  `TaskType` VARCHAR(50) NOT NULL,  `SubjectId` INT(10) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`StudentId`) REFERENCES `Students`(`Id`), FOREIGN KEY (`SubjectId`) REFERENCES `Subjects`(`Id`));",
      "CREATE TABLE `PersonalSubjects` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `GroupId` INT(10),  `SubjectId` INT(10) NOT NULL,  `Semester` DATE NOT NULL,  `SubjectGroup` INT(10) NOT NULL UNIQUE,  PRIMARY KEY (`Id`), FOREIGN KEY (`GroupId`) REFERENCES `Groups`(`Id`));",
      "CREATE TABLE `PersonalSubjectGroups` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `StudentId` INT(10) NOT NULL,  `GroupId` INT(10) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`StudentId`) REFERENCES `Students`(`Id`), FOREIGN KEY (`GroupId`) REFERENCES `PersonalSubjects`(`SubjectGroup`));",
      "CREATE TABLE `Schedule` (`Id` INT(10) NOT NULL  AUTO_INCREMENT,  `SubjectId` INT(10) NOT NULL,  `GroupId` INT(10),  `PersonalSubjGroupId` INT(10) NOT NULL,  `Time` DATE NOT NULL,  `Place` VARCHAR(50),  `Semester` DATE NOT NULL,  `WeekDay` VARCHAR(15) NOT NULL,  `Week` INT(1) NOT NULL,  PRIMARY KEY (`Id`), FOREIGN KEY (`PersonalSubjGroupId`) REFERENCES `PersonalSubjectGroups`(`Id`), FOREIGN KEY (`GroupId`) REFERENCES `Groups`(`Id`));"
    ]
  },
  "use": "USE learnoree;",
  "selectUsersByEmail": "SELECT * FROM Users WHERE Email = {{email}};",
  "selectUser": "SELECT * FROM `{{table}}` WHERE UserId = {{id}};",
  "findUserByToken": "SELECT * FROM Users WHERE ResetToken = {{token}};",
  "modifyUserToken": "UPDATE Users SET ResetToken = {{token}} WHERE Email = {{email}};",
  "modifyUserPassword": "UPDATE Users SET Password={{password}} WHERE ResetToken = {{token}};",
  "addUserCredentials": "INSERT INTO Users (Email, Role, Password, Authorized) VALUES ('{{email}}', '{{role}}', '{{password}}', 0);",
  "insertAdmin": "INSERT INTO Admins (Name, Surname, SecondName, UserId, Phone) VALUES ('{{name}}', '{{surname}}', '{{secondName}}', {{id}}, '{{phone}}')",
  "insertTeacher": "INSERT INTO Teachers (Name, Surname, SecondName, CathedraId, UserId, Phone) VALUES ('{{name}}', '{{surname}}', '{{secondName}}', {{cathedraId}}, {{id}}, '{{phone}}')",
  "insertStudent": "INSERT INTO Students (Name, Surname, SecondName, UserId, Phone, StartDate, EndDate) VALUES ('{{name}}', '{{surname}}', '{{secondName}}', {{id}}, '{{phone}}', STR_TO_DATE('{{startDate}}', '%d/%m/%Y'), STR_TO_DATE('{{endDate}}', '%d/%m/%Y'))",
  "findCathedra": "SELECT * FROM Cathedras LEFT JOIN Faculties ON Faculties.Id = Cathedras.FacultyId WHERE Faculties.ShortName = '{{faculty}}' and Cathedras.ShortName = '{{cathedra}}",
  "findGroup": "SELECT * FROM `Groups` WHERE `Groups`.Name = '{{group}}';",
  "insertStudentGroupLink": "INSERT INTO StudentGroupLink (StudentId, GroupId) VALUES ('{{student}}', '{{group}}');",
  "findSpecialty": "SELECT `Specialties`.Id, `Specialties`.Name, `Specialties`.Code, `Specialties`.CathedraId FROM `Specialties` JOIN `Groups` ON `Specialties`.Id = `Groups`.SpecialtyId JOIN `StudentGroupLink` ON `StudentGroupLink`.GroupId = `Groups`.Id WHERE `StudentGroupLink`.StudentId = '{{id}}'",
  "findFacultyBySpecialty": "SELECT `Faculties`.Id, `Faculties`.Name, `Faculties`.ShortName, `Faculties`.Contacts FROM `Faculties` JOIN `Cathedras` ON `Cathedras`.FacultyId = `Faculties`.Id JOIN `Specialties` ON `Specialties`.CathedraId = `Cathedras`.Id WHERE `Specialties`.Id = '{{id}}';",
  "findStudentGroup": "SELECT * FROM `Groups` JOIN `StudentGroupLink` ON `StudentGroupLink`.GroupId = `Groups`.Id WHERE `StudentGroupLink`.StudentId = '{{id}}'",
  "findTeacherCathedraAndFaculty": "SELECT `Faculties`.Id as faculty_id, `Faculties`.Name  as faculty_name, `Faculties`.ShortName  as faculty_shortName, `Faculties`.Contacts  as faculty_contacts, `Cathedras`.Id as cathedra_id, `Cathedras`.Name as cathedra_name, `Cathedras`.ShortName as cathedra_shortName, `Cathedras`.Contacts as cathedra_contacts FROM `Teachers` JOIN `Cathedras` ON `Teachers`.CathedraId = `Cathedras`.Id JOIN `Faculties` ON `Cathedras`.FacultyId = `Faculties`.Id WHERE `Teachers`.Id = '{{id}}'"
}
